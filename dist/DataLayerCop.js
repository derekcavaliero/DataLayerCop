/**!
 * DataLayerCop.js
 * 
 * A utility library to help enforce dataLayer conventions and syntax.
 * Because sometimes... you just need to be the bad ðŸ‘®.
 *
 * Author: Derek Cavaliero (@derekcavaliero)
 * Repository: https://github.com/derekcavaliero/datalayercop
 * Version: 1.0.beta
 * License: MIT
 */
"use strict";class DataLayerCop{constructor(e={}){this.config={},Object.assign(this.config,{dataLayer:"dataLayer",preferredCase:"snake",report:{toUrl:!1,toDataLayer:!1},rules:[]},e),this.setDataLayer(),this.registerRules(),Array.isArray(this.config.rules)&&this.config.rules?.length?(this.modifyPushMethod(),this.getDataLayer().push({event:"datalayercop.loaded",rules:this.config.rules})):this.console("warn","No rules defined.")}setDataLayer(){window[this.config.dataLayer]=window[this.config.dataLayer]||[]}getDataLayer(){return window[this.config.dataLayer]}getPredefinedRule(e){return{event_property_is_defined:{name:"Expect payload to include an `event` property.",assert:e=>void 0!==e.event,dropOnFail:!1,type:"gtm"},event_is_namespaced:{name:"Expect `event` property value to be prefixed with a namespace.",assert:e=>this.callStatic("isNamespaced",e.event),dropOnFail:!1,type:"gtm"},payload_properties_are_preferred_case:{name:`Expect all payload properties to match preferred case (${this.config.preferredCase}).`,assert:e=>{const t=Object.keys(e);for(let e=0;e<t.length;e++)if(!this.isPreferredCase(t[e]))return!1;return!0},dropOnFail:!1},event_is_preferred_case_after_namespace:{name:`Expect \`event\` property value to match preferred case (${this.config.preferredCase}) after namespace.`,assert:e=>{if(!this.callStatic("isNamespaced",e.event))return!0;const t=e.event.split(".")[1];return this.isPreferredCase(t)},dropOnFail:!1,type:"gtm"}}[e]||{}}registerRules(){this.config.rules=this.config.rules.map((e=>(e.predefined&&delete(e=Object.assign({},this.getPredefinedRule(e.predefined),e)).predefined,e)))}processRules(e,t){for(let r=0;r<this.config.rules.length;r++){let a=this.config.rules[r];if(a?.type&&a.type!==t)continue;let s=this.enforce(a,e,t);if(!s.passed&&(this.config.report.only.includes(a?.severity)&&(this.reportToUrl(s),this.reportToDataLayer(s)),a.dropOnFail))return!1}return e}reportToDataLayer(e){!1!==this.config.report.toDataLayer&&this.getDataLayer().push({event:"gtm.pageError","gtm.errorMessage":e?.name,datalayercop:e})}reportToUrl(e){if(!this.isValidUrl(this.config.report.toUrl))return void this.console("warn",`Attempted to report to URL - but an invalid URL was provided (${this.config.report.toUrl}).`);let t={hostname:location.hostname,url:location.href,user_agent:navigator.userAgent};Object.assign(t,e),navigator.sendBeacon(this.config.report.toUrl,JSON.stringify(t))}modifyPushMethod(){var e=this,t=this.getDataLayer().push;this.getDataLayer().push=function(){let r;if(e.isArgumentsObject(arguments[0])){let t=arguments[0];"event"==t[0]&&(r=e.processRules(t,"gtag"))}else e.callStatic("isObjectLiteral",arguments[0])&&(r=arguments[0],r?.event?.startsWith("gtm.")||(r=e.processRules(r,"gtm")));if(r)return t(r)}}enforce(e={},t,r){let a={rule:e,payload:t,payloadType:r};return"function"!=typeof e.assert?(this.console("warn","Rule object is missing assert method - skipping...",e),a.passed=!0,a):(a.passed=e.assert(t,r),a.passed||this.console("warn",`${r} payload failed rule: ${e?.name}`,a),a)}callStatic(e,...t){return DataLayerCop[e].apply(this,t)}console(e,t,r){console[e](`ðŸš¨ ${this.config.dataLayer} Cop - ${t}`,r)}isArgumentsObject(e){return"[object Arguments]"===Object.prototype.toString.call(e)}isValidUrl(e){try{var t=new URL(e)}catch(e){return!1}return"https:"===t.protocol}static getCommonPattern(e){switch(e){case"snake":return/^[a-z0-9_]+$/;case"camel":return/^[a-z0-9]+([A-Z][a-z0-9]+)*$/;case"pascal":return/^[A-Z][a-z0-9]+([A-Z][a-z0-9]+)*$/;case"namespaced":return/^([a-zA-Z0-9_]+\.)/;default:return e}}isPreferredCase(e){return DataLayerCop.getCommonPattern(this.config.preferredCase).test(e)}static isObjectLiteral(e){var t=e;return"object"==typeof e&&null!==e&&function(){for(;null!==Object.getPrototypeOf(t=Object.getPrototypeOf(t)););return Object.getPrototypeOf(e)===t}()}static isSnakeCase(e){return DataLayerCop.getCommonPattern("snake").test(e)}static isCamelCase(e){return DataLayerCop.getCommonPattern("camel").test(e)}static isPascalCase(e){return DataLayerCop.getCommonPattern("pascal").test(e)}static isNamespaced(e){return DataLayerCop.getCommonPattern("namespaced").test(e)}}
